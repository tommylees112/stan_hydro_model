// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace abcmodel0_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "stan_code/abcmodel0.stan");
    reader.add_event(44, 42, "end", "stan_code/abcmodel0.stan");
    return reader;
}

class abcmodel0_model
  : public stan::model::model_base_crtp<abcmodel0_model> {
private:
        int T;
        std::vector<double> Q;
        std::vector<double> P;
        double S_t0;
public:
    abcmodel0_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    abcmodel0_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "abcmodel0_model_namespace::abcmodel0_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 0);

            current_statement_begin__ = 3;
            validate_non_negative_index("Q", "T", T);
            context__.validate_dims("data initialization", "Q", "double", context__.to_vec(T));
            Q = std::vector<double>(T, double(0));
            vals_r__ = context__.vals_r("Q");
            pos__ = 0;
            size_t Q_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Q_k_0_max__; ++k_0__) {
                Q[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 4;
            validate_non_negative_index("P", "T", T);
            context__.validate_dims("data initialization", "P", "double", context__.to_vec(T));
            P = std::vector<double>(T, double(0));
            vals_r__ = context__.vals_r("P");
            pos__ = 0;
            size_t P_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                P[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "S_t0", "double", context__.to_vec());
            S_t0 = double(0);
            vals_r__ = context__.vals_r("S_t0");
            pos__ = 0;
            S_t0 = vals_r__[pos__++];


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 9;
            num_params_r__ += 1;
            current_statement_begin__ = 10;
            num_params_r__ += 1;
            current_statement_begin__ = 11;
            num_params_r__ += 1;
            current_statement_begin__ = 12;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~abcmodel0_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 9;
        if (!(context__.contains_r("a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a", "double", context__.to_vec());
        double a(0);
        a = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 10;
        if (!(context__.contains_r("b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "b", "double", context__.to_vec());
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 11;
        if (!(context__.contains_r("c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "c", "double", context__.to_vec());
        double c(0);
        c = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable c: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 12;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 9;
            local_scalar_t__ a;
            (void) a;  // dummy to suppress unused var warning
            if (jacobian__)
                a = in__.scalar_lub_constrain(0, 1, lp__);
            else
                a = in__.scalar_lub_constrain(0, 1);

            current_statement_begin__ = 10;
            local_scalar_t__ b;
            (void) b;  // dummy to suppress unused var warning
            if (jacobian__)
                b = in__.scalar_lub_constrain(0, 1, lp__);
            else
                b = in__.scalar_lub_constrain(0, 1);

            current_statement_begin__ = 11;
            local_scalar_t__ c;
            (void) c;  // dummy to suppress unused var warning
            if (jacobian__)
                c = in__.scalar_lub_constrain(0, 1, lp__);
            else
                c = in__.scalar_lub_constrain(0, 1);

            current_statement_begin__ = 12;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lub_constrain(0, 1, lp__);
            else
                sigma = in__.scalar_lub_constrain(0, 1);

            // transformed parameters
            current_statement_begin__ = 16;
            validate_non_negative_index("Qsim", "T", T);
            std::vector<local_scalar_t__> Qsim(T, local_scalar_t__(0));
            stan::math::initialize(Qsim, DUMMY_VAR__);
            stan::math::fill(Qsim, DUMMY_VAR__);

            current_statement_begin__ = 17;
            validate_non_negative_index("Qs", "T", T);
            std::vector<local_scalar_t__> Qs(T, local_scalar_t__(0));
            stan::math::initialize(Qs, DUMMY_VAR__);
            stan::math::fill(Qs, DUMMY_VAR__);

            current_statement_begin__ = 18;
            validate_non_negative_index("Qf", "T", T);
            std::vector<local_scalar_t__> Qf(T, local_scalar_t__(0));
            stan::math::initialize(Qf, DUMMY_VAR__);
            stan::math::fill(Qf, DUMMY_VAR__);

            current_statement_begin__ = 19;
            validate_non_negative_index("S", "T", T);
            std::vector<local_scalar_t__> S(T, local_scalar_t__(0));
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 22;
            stan::model::assign(S, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        S_t0, 
                        "assigning variable S");
            current_statement_begin__ = 23;
            for (int t = 2; t <= T; ++t) {

                current_statement_begin__ = 24;
                stan::model::assign(S, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (((1 - c) * get_base1(S, (t - 1), "S", 1)) + (a * get_base1(P, t, "P", 1))), 
                            "assigning variable S");
                current_statement_begin__ = 25;
                stan::model::assign(Qs, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (c * get_base1(S, t, "S", 1)), 
                            "assigning variable Qs");
                current_statement_begin__ = 26;
                stan::model::assign(Qf, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (((1 - a) - b) * get_base1(P, t, "P", 1)), 
                            "assigning variable Qf");
                current_statement_begin__ = 27;
                stan::model::assign(Qsim, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (get_base1(Qf, t, "Qf", 1) + get_base1(Qs, t, "Qs", 1)), 
                            "assigning variable Qsim");
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 16;
            size_t Qsim_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qsim_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(Qsim[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Qsim" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Qsim: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 17;
            size_t Qs_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qs_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(Qs[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Qs" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Qs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 18;
            size_t Qf_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qf_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(Qf[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Qf" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Qf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 19;
            size_t S_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < S_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(S[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: S" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 33;
            lp_accum__.add(normal_log<propto__>(a, 0.5, 1));
            current_statement_begin__ = 34;
            lp_accum__.add(normal_log<propto__>(b, 0.5, 1));
            current_statement_begin__ = 35;
            lp_accum__.add(normal_log<propto__>(c, 0.5, 1));
            current_statement_begin__ = 36;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 40;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 41;
                lp_accum__.add(normal_log<propto__>(get_base1(Q, t, "Q", 1), get_base1(Qsim, t, "Qsim", 1), sigma));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a");
        names__.push_back("b");
        names__.push_back("c");
        names__.push_back("sigma");
        names__.push_back("Qsim");
        names__.push_back("Qs");
        names__.push_back("Qf");
        names__.push_back("S");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "abcmodel0_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double a = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(a);

        double b = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(b);

        double c = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(c);

        double sigma = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(sigma);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 16;
            validate_non_negative_index("Qsim", "T", T);
            std::vector<double> Qsim(T, double(0));
            stan::math::initialize(Qsim, DUMMY_VAR__);
            stan::math::fill(Qsim, DUMMY_VAR__);

            current_statement_begin__ = 17;
            validate_non_negative_index("Qs", "T", T);
            std::vector<double> Qs(T, double(0));
            stan::math::initialize(Qs, DUMMY_VAR__);
            stan::math::fill(Qs, DUMMY_VAR__);

            current_statement_begin__ = 18;
            validate_non_negative_index("Qf", "T", T);
            std::vector<double> Qf(T, double(0));
            stan::math::initialize(Qf, DUMMY_VAR__);
            stan::math::fill(Qf, DUMMY_VAR__);

            current_statement_begin__ = 19;
            validate_non_negative_index("S", "T", T);
            std::vector<double> S(T, double(0));
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 22;
            stan::model::assign(S, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        S_t0, 
                        "assigning variable S");
            current_statement_begin__ = 23;
            for (int t = 2; t <= T; ++t) {

                current_statement_begin__ = 24;
                stan::model::assign(S, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (((1 - c) * get_base1(S, (t - 1), "S", 1)) + (a * get_base1(P, t, "P", 1))), 
                            "assigning variable S");
                current_statement_begin__ = 25;
                stan::model::assign(Qs, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (c * get_base1(S, t, "S", 1)), 
                            "assigning variable Qs");
                current_statement_begin__ = 26;
                stan::model::assign(Qf, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (((1 - a) - b) * get_base1(P, t, "P", 1)), 
                            "assigning variable Qf");
                current_statement_begin__ = 27;
                stan::model::assign(Qsim, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (get_base1(Qf, t, "Qf", 1) + get_base1(Qs, t, "Qs", 1)), 
                            "assigning variable Qsim");
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t Qsim_k_0_max__ = T;
                for (size_t k_0__ = 0; k_0__ < Qsim_k_0_max__; ++k_0__) {
                    vars__.push_back(Qsim[k_0__]);
                }
                size_t Qs_k_0_max__ = T;
                for (size_t k_0__ = 0; k_0__ < Qs_k_0_max__; ++k_0__) {
                    vars__.push_back(Qs[k_0__]);
                }
                size_t Qf_k_0_max__ = T;
                for (size_t k_0__ = 0; k_0__ < Qf_k_0_max__; ++k_0__) {
                    vars__.push_back(Qf[k_0__]);
                }
                size_t S_k_0_max__ = T;
                for (size_t k_0__ = 0; k_0__ < S_k_0_max__; ++k_0__) {
                    vars__.push_back(S[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "abcmodel0_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t Qsim_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qsim_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qsim" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qs_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qs_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qs" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qf_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qf_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qf" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < S_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t Qsim_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qsim_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qsim" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qs_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qs_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qs" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Qf_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < Qf_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Qf" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t S_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < S_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef abcmodel0_model_namespace::abcmodel0_model stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif

